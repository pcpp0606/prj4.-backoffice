generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int      @id @default(autoincrement()) @map("user_id")
  email        String   @unique @map("email")
  password     String   @map("password")
  name         String   @map("name")
  nickname         String   @map("nickname")
  phoneNumber  String  @map("phone_number")
  role         Role     @default(USER)  @map("role")
  cityAddress  String  @map("city_address")
  streetAddress  String  @map("street_address")
  detailAddress  String  @map("detail_address")
  isEmailValid Boolean  @default(false) @map("is_email_valid")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  Point     Point?
  Restaurant   Restaurant?
  Cart     Cart?
  Order  Order[]
  Review   Review[]

  @@map("users")
}

enum Role {
  USER
  OWNER
  ADMIN
}

model Point {
  pointId        Int   @unique @default(autoincrement()) @map("point_id")
  UserId       Int    @unique  @map("user_id")
  point     Int   @map("point")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  User    User      @relation(fields: [UserId], references: [userId])
  PointLog    PointLog[]

  @@map("points")
}

model PointLog {
  logId        Int   @unique @default(autoincrement()) @map("log_id")
  UserId       Int    @map("user_id")
  point     Int   @map("point")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  Point    Point      @relation(fields: [UserId], references: [UserId])

  @@map("point_logs")
}

model Restaurant {
  restaurantId      Int     @id @default(autoincrement()) @map("restaurant_id")
  OwnerId     Int     @unique   @map("owner_id")
  name      String     @map("name")
  cityAddress  String  @map("city_address")
  streetAddress  String  @map("street_address")
  detailAddress  String  @map("detail_address")
  mainMenuType   String    @map("main_menu_type")
  deliverAvailableArea    String     @map("delivery_available_area")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  User    User      @relation(fields: [OwnerId], references: [userId])
  Menu    Menu[]
  Order    Order[]
  Review   Review[]

  @@map("restaurants")
}


model Menu {
  menuId      Int     @id @default(autoincrement()) @map("menu_id")
  RestaurantId   Int     @map("restaurant_id")
  menuName      String     @map("menu_name")
  menuImageUrl  String  @map("menu_image_url")
  menuPrice  Int  @map("menu_price")
  menuType  Int  @map("menu_type")
  menuDescription   String    @map("menu_description")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  Restaurant    Restaurant      @relation(fields: [RestaurantId], references: [restaurantId])
  CartDetail    CartDetail[]
  OrderDetail    OrderDetail[]

  @@map("menus")
}

model Cart {
  cartId   Int   @id @default(autoincrement()) @map("cart_id")
  UserId   Int   @unique  @map("user_id")
  RestaurantId   Int?     @map("restaurant_id")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  User    User      @relation(fields: [UserId], references: [userId])
  CartDetail   CartDetail[]

  @@map("carts")
}


model CartDetail {
  cartDetailId    Int   @id @default(autoincrement()) @map("cart_detail_id")
  CartId   Int    @map("cart_id")
  MenuId   Int   @unique  @map("menu_id")
  menuCount   Int     @map("menu_count")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  Cart    Cart      @relation(fields: [CartId], references: [cartId])
  Menu    Menu      @relation(fields: [MenuId], references: [menuId])

  @@map("cart_details")
}


model Order {
  orderId   Int   @id @default(autoincrement()) @map("order_id")
  UserId   Int   @unique  @map("user_id")
  RestaurantId   Int     @map("restaurant_id")
  userRequirment   String   @map("user_requirment")
  orderStatus    OrderStatus @default(READY) @map("order_status")
  totalPrice   Int  @map("total_price")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  User    User      @relation(fields: [UserId], references: [userId])
  Restaurant    Restaurant      @relation(fields: [RestaurantId], references: [restaurantId])
  OrderDetail  OrderDetail[]
  Review   Review[]

  @@map("orders")
}

enum OrderStatus {
  READY
  DONE
}


model OrderDetail {
  orderDetailId    Int   @id @default(autoincrement()) @map("order_detail_id")
  OrderId   Int    @map("order_id")
  MenuId   Int   @unique  @map("menu_id")
  menuPrice   Int  @map("menu_price")
  menuCount   Int     @map("menu_count")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  Order    Order      @relation(fields: [OrderId], references: [orderId])
  Menu    Menu      @relation(fields: [MenuId], references: [menuId])

  @@map("order_details")
}


model Review {
  reviewId   Int   @id @default(autoincrement()) @map("review_id")
  UserId   Int     @map("user_id")
  OrderId   Int   @map("order_id")
  RestaurantId   Int     @map("restaurant_id")
  score   Int   @map("score")
  review    String  @map("review")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  User    User      @relation(fields: [UserId], references: [userId])
  Order    Order      @relation(fields: [OrderId], references: [orderId])
  Restaurant  Restaurant   @relation(fields: [RestaurantId], references: [restaurantId])
  Image  Image[]

  @@map("reviews")
}

model Image {
  imageId   Int   @id @default(autoincrement()) @map("image_id")
  ReviewId   Int     @map("review_id")
  imageUrl   String     @map("image_url")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  Review    Review      @relation(fields: [ReviewId], references: [reviewId])

  @@map("images")
}